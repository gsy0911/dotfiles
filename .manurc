db-mysql:login ## mysql -u {user} -D {database} -p {terminal} ## login
db-mysql:sql ## show columns from {table} ## show schema
db-psql:login ## psql -h {host} -U {user} -d {database} ## login
db-psql:update ## UPDATE {table} SET {column}={value} WHERE {column}={condition} ## update table
db-psql:schema ## \d {table} ## show schema
db-psql:insert ## INSERT INTO {table} (col_1_name, ..., col_n_name) VALUES ('{value_1}', ..., '{value_n}'); ## insert data
db-psql:export-csv ## psql -h {host} -U {user} -d {database} -c "\copy {table_name} to {file_path} DELIMITER ',' CSV HEADER" ## insert data
db-psql:import-csv ## psql -h {host} -U {user} -d {database} -c "\copy {table_name} from {file_path} DELIMITER ',' CSV HEADER" ## insert data

usage:net:nslookup ## nslookup -type=ns [domain] ##
usage:net:nslookup ## nslookup -type=a [domain] ##
usage:net:nslookup ## nslookup -debug -q=mx [domain] ## check TTL
usage:net:traceroute ## traceroute [IP] ##
alias:net:ip ## ip {domain} ## dig +short myip.opendns.com @resolver1.opendns.com
alias:net:ip ## localip ## ipconfig getifaddr en0

alias:dir ## cdp or ^p ## cd "$( ls -1d $HOME/Development/*/* | peco )"
alias:dir ## ls ## ls or exa
alias:dir ## l ## ls -CF or exa -F
alias:dir ## ll ## ls -l or exa -l
alias:dir ## la ## ls -a or exa -a
alias:dir ## lla ## ls -la or exa -la
alias:dir ## lt ## exa -lT --level=2 --git-ignore
alias:dir ## u ## cd ..
alias:dir ## uu ## cd ../..
alias:other ## tenki ## curl wttr.in/Tokyo
alias:global ## C ## `| wc -l`
alias:global ## G ## `| grep --color=auto`
usage:dir ## zip compress ## zip -r NAME.zip FILE_DIR -x "*.DS_Store" "*__MACOSX*"

alias:utils ## diffu ## colordiff -u
alias:utils ## diffy ## colordiff -y
alias:utils ## timer ## date && time cat && date

alias:makefile ## mp ## make | peco
alias:makefile ## fis ## make
alias:aws ## cred ## cat $HOME/.aws/credentials | grep "\[" | sed -e 's/\[//g' | sed -e 's/\]//g'
alias:aws ## credp ## set AWS_DEFAULT_PROFILE=$( cred | peco )
alias:cdk ## cdkld ## cdk deploy "$(cdk ls | grep $1 | peco)"
alias:node.js ## nsc ## cat package.json | jq ".scripts"
alias:docker ## dl {filter-word} ## docker images {| grep $1} | sort | awk | peco
alias:docker ## dr ## docker run --rm (-d) {CMD}
alias:docker ## ds ## docker stop $(docker ps -q)
alias:docker ## dcb ## docker-compose build
alias:docker ## dcu ## docker-compose up
alias:docker ## dcd ## docker-compose down
alias:docker ## dcr ## dcd && dcb && dcu
alias:docker ## dcuf ## docker-compose -f $1 up --build
alias:docker ## dcrf ## dcd && dcuf $1
alias:docker ## dcdrm ## docker-compose down --rmi all --volumes --remove-orphans
alias:docker ## dst ## docker stats
alias:docker ## dexp ## docker exec $(docker ps | peco) /bin/bash
alias:docker ## dlop ## docker logs $(docker ps | peco)
alias:docker ## dps ## docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}"'
alias:docker ## drm ## docker system prune
alias:docker ## drv ## docker volume rm $(docker volume ls -qf dangling=true)
alias:docker ## drmip ## docker rmi $(docker images | peco | awk '{print $3}')
alias:docker ## drmcp ## docker rm -f $(docker ps -a | peco | awk '{print $1}')
alias:docker ## trp ## trivy --severity=HIGH,CRITICAL --ignore-unfixed=true {peco chosen}
usage:docker ## - ## choose and run: dl {filter-word} && dr $li {CMD}
usage:docker ## - ## docker cp {container-id}:/path/file.txt .
usage:docker ## - ## docker exec -it {container-id} /bin/bash
usage:docker ## - ## docker sysmtem df
usage:docker ## - ## docker sysmtem prune
usage:docker ## - ## docker volume prune
usage:docker ## - ## docker network create {network-name}

usage:cdk ## cdk bootstrap aws://ACCOUNT-NUMBER-1/REGION-1 ## bootstrap

