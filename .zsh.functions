#!/bin/zsh

# Terminal colors
TC='\e['
Rst="${TC}0m"
Blk="${TC}30m";
Red="${TC}31m";
Grn="${TC}32m";
Yel="${TC}33m";
Blu="${TC}34m";
Prp="${TC}35m";
Cyn="${TC}36m";
Wht="${TC}37m";

function mm() {
    WIDTH=$(tput cols)
    LOWER_BAR=$(yes '-' | head -n $((WIDTH-1)) | tr -d '\n')
    if [[ $1 ]]; then
        for item in `cat $HOME/.manurc | grep $1 | awk -F " *?## *?" '{print $1}' | uniq | sort`
        do
          item_length=${#item}
          upper_first_bar_len=$((40-$item_length))
          upper_first_bar=$(yes '-' | head -n $upper_first_bar_len | tr -d '\n')
          upper_second_bar_len=$((WIDTH-3-40-1))
          upper_second_bar=$(yes '-' | head -n $upper_second_bar_len | tr -d '\n')
          echo "\033[0;33m+ $item $upper_first_bar+$upper_second_bar\033[0;0m"
          cat $HOME/.manurc | grep "$item\s" | awk -F " *?## *?" '{printf "\033[0;33m|\033[0;0m$ \033[0;36m%-40s\033[0;0m\033[0;33m|\033[0;0m %s\n", $2, $3}'
        done
        echo "\033[0;33m+$LOWER_BAR\033[0;0m\n"
    else
        echo "$Yel+$LOWER_BAR$Rst"
        printf "$Yel|$Rst$ "$Cyn"mm alias[:dir, ...]$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm iterm[:line, :tab, :window]$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm net$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm usage[:docker, ...]$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm db-[psql, mysql]$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm av$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm aws$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm github$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm makefile$Rst\n"
        echo "$Yel+$LOWER_BAR$Rst\n"
    fi
}

# Docker List
function dl() {
    if [[ $1 ]]; then
        local image="$(docker images | sed -e '1d' | grep $1 | sort | awk '{printf "%-20s %-20s %s\n", $2, $3, $1}' | peco | awk '{printf "%s:%s", $3, $1}' | sed -e 's/%//g')"
    else
        local image="$(docker images | sed -e '1d' | sort | awk '{printf "%-20s %-20s %s\n", $2, $3, $1}' | peco | awk '{printf "%s:%s", $3, $1}' | sed -e 's/%//g')"
    fi
    export li=$image
    echo "export li=$image"
}

# TRivy Peco
function trp() {
    if [[ $1 ]]; then
        dl $1
    else
        dl
    fi
    trivy --severity=HIGH,CRITICAL --ignore-unfixed=true $li
}

# CD Project-directory
function cdp() {
    local dir="$( ls -1d $HOME/Development/*/* | peco )"
    if [ ! -z "$dir" ] ; then
        echo $dir
        cd $dir
    fi
}
zle -N cdp
bindkey "^p" cdp

# Docker RM Images with Peco
function drmip(){
    local imageId=$(docker images | sort | peco | awk '{print $3}')
    [ -n "$imageId" ] && docker rmi -f $imageId
}

function jump_middle() {
    CURSOR=$((${#BUFFER} / 2))
    zle redisplay
}
zle -N jump_middle
bindkey "^j" jump_middle

# Node-SCript
function nsc() {
    if [[ -f package.json ]]; then
        printf "\033[36m%-44s\033[0m %-20s\n" "[Command]" "[Description]"
        cat package.json | jq ".scripts" | grep : | sed -e 's/,//g' |  awk -F "\": \"" '{printf "(npm run|yarn)\033[36m%-30s\033[0m %-20s\n", $1, $2}' | sed -e 's/\"//g'
    fi
}

# CDK List && cdk Deploy
function cdkld() {
    if [[ $1 ]]; then
        local stack="$(cdk ls | sort | grep $1 | peco)"
        echo deploying... $stack
        cdk deploy $stack
    else
        local stack="$(cdk ls | sort | peco)"
        echo deploying... $stack
        cdk deploy $stack
    fi
}

function cdk_pkg_ver() {
    if [[ -f package.json ]]; then
        local cdk_installed_packages_version_count="$(cat package-lock.json | sed -e 's/ //g' |grep -E "\"@aws-cdk/.*?:\"[0-9\.]*\"," | awk -F ":" '{printf "%s\n", $2}' | sed -e 's/\"//g' | sed -e 's/,//g' | uniq | wc -l | awk '{print $1}')"
        if [ $cdk_installed_packages_version_count -eq 1 ]; then
            echo "cdk package compatibility: ⭕"
        else
            echo "cdk package compatibility: ❌"
        fi
    else
        echo "cdk package not found"
    fi
}

function set_cdk() {
    if [[ $1 ]]; then
        local account=$(aws sts get-caller-identity --profile $1 | jq -r .Account)
    else
        local account=$(aws sts get-caller-identity | jq -r .Account)
    fi
    export CDK_DEFAULT_ACCOUNT=$account
    echo "set CDK_DEFAULT_ACCOUNT as $CDK_DEFAULT_ACCOUNT as deploy account"
}

# show aws CREDential
function cred() {
    cat $HOME/.aws/credentials | grep "\[" | sed -e 's/\[//g' | sed -e 's/\]//g'
}

# CREDential with Peco
function credp() {
    target=$(cred | peco)
    export AWS_PROFILE=$target
    export AWS_DEFAULT_PROFILE=$target
    echo "set AWS_DEFAULT_PROFILE as $AWS_DEFAULT_PROFILE"
}

# Docker EXec with Peco
function dexp() {
    container=$(docker ps --format "table {{.ID}} {{.Names}}" | grep -v "CONTAINER" | peco | awk '{printf "%s\n", $1}')
    echo "chosen: $container"
    docker exec -it $container /bin/bash
}

# Docker LOGs with Peco
function dlop() {
    container=$(docker ps -a --format "table {{.ID}} {{.Names}}" | grep -v "CONTAINER" | peco | awk '{printf "%s\n", $1}')
    echo "chosen: $container"
    docker logs $container
}