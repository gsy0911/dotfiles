#!/bin/zsh

# Terminal colors
TC='\e['
Rst="${TC}0m"
Blk="${TC}30m";
Red="${TC}31m";
Grn="${TC}32m";
Yel="${TC}33m";
Blu="${TC}34m";
Prp="${TC}35m";
Cyn="${TC}36m";
Wht="${TC}37m";

function mm() {
    WIDTH=$(tput cols)
    LOWER_BAR=$(yes '-' | head -n $((WIDTH-1)) | tr -d '\n')
    if [[ $1 ]]; then
        for item in `cat $HOME/.manurc | grep $1 | awk -F " *?## *?" '{print $1}' | uniq | sort`
        do
          item_length=${#item}
          upper_first_bar_len=$((40-$item_length))
          upper_first_bar=$(yes '-' | head -n $upper_first_bar_len | tr -d '\n')
          upper_second_bar_len=$((WIDTH-3-40-1))
          upper_second_bar=$(yes '-' | head -n $upper_second_bar_len | tr -d '\n')
          echo "$Yel+ $item $upper_first_bar+$upper_second_bar$Rst"
          cat $HOME/.manurc | grep "$item\s" | awk -F " *?## *?" '{printf "\033[0;33m|\033[0;0m$ \033[0;36m%-40s\033[0;0m\033[0;33m|\033[0;0m %s\n", $2, $3}'
        done
        echo "$Yel+$LOWER_BAR$Rst\n"
    else
        echo "$Yel+$LOWER_BAR$Rst"
        printf "$Yel|$Rst$ "$Cyn"mm alias[:dir, ...]$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm net$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm usage[:docker, ...]$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm db-[psql, mysql]$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm av$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm aws$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm github$Rst\n"
        printf "$Yel|$Rst$ "$Cyn"mm makefile$Rst\n"
        echo "$Yel+$LOWER_BAR$Rst\n"
    fi
}

function fzf-help() {
    target=$(ghq root)/dotfiles/man
    local src=$(ls $target | fzf --preview "bat --color=always --style=header,grid --line-range :80 $target/{}")
    bat $target/$src
    zle accept-line
}
zle -N fzf-help
# bindkey '^h' fzf-help

function fzf-task-command-copy() {
    local src=$(task | grep -v "Available tasks for" | fzf)
    local selected=$(echo $src | cut -d' ' -f2)
    local selectedCommand=${selected%?}
    echo -n "task $selectedCommand" | pbcopy
    # printf "\n$Grn * SELECTED:$Rst \t$selectedCommand"
    local desc=$(echo $src | awk -F'[:*;]' '{print $4}' | sed 's/^ *//')
    local eg=$(echo $src | awk -F'[;]' '{print $2}' | sed 's/^ *//')
    printf "\n$Grn * DESC:$Rst \t$desc"
    printf "\n$Grn * COPIED AS:$Rst \ttask $selectedCommand"
    printf "\n$Grn * USAGE:$Rst \t$eg"
    zle accept-line
    zle -R -c
}
zle -N fzf-task-command-copy
bindkey '^t' fzf-task-command-copy

function open-neovim() {
    nvim
    zle accept-line
}
zle -N open-neovim
bindkey '^n' open-neovim

# see: https://zenn.dev/mozumasu/articles/mozumasu-lazy-git
# ghq
function ghq-fzf() {
  local src=$(ghq list | fzf --preview "bat --color=always --style=header,grid --line-range :80 $(ghq root)/{}/README.*")
  if [ -n "$src" ]; then
    BUFFER="cd $(ghq root)/$src"
    zle accept-line
  fi
  zle -R -c
}
zle -N ghq-fzf
bindkey '^g' ghq-fzf

# Docker RM Images with Peco
function drmip(){
    local imageId=$(docker images | sort | fzf | awk '{print $3}')
    [ -n "$imageId" ] && docker rmi -f $imageId
}

function drmcp(){
    local containerId=$(docker ps -a | sort | fzf | awk '{print $1}')
    [ -n "$containerId" ] && docker rm -f $containerId
}

function drmig() {
  docker image ls \
    | sed -e '1d' \
    | awk '{printf("%s:%s\n", $1, $2)}' \
    | gum filter --no-limit \
    | xargs docker image rm
}

function jump_middle() {
    CURSOR=$((${#BUFFER} / 2))
    zle redisplay
}
zle -N jump_middle
# bindkey "^m" jump_middle

# Node-SCript
function nsc() {
    if [[ -f package.json ]]; then
        printf "\033[36m%-44s\033[0m %-20s\n" "[Command]" "[Description]"
        cat package.json | jq ".scripts" | grep : | sed -e 's/,//g' |  awk -F "\": \"" '{printf "(npm run|yarn)\033[36m%-30s\033[0m %-20s\n", $1, $2}' | sed -e 's/\"//g'
    fi
}

# show aws CREDential
function cred() {
    cat $HOME/.aws/config | grep "\[profile" | sed -e 's/\[profile //g' | sed -e 's/\]//g'
}

# CREDential with Peco
function credp() {
    target=$(cred | fzf)
    export AWS_PROFILE=$target
    export AWS_DEFAULT_PROFILE=$target
    echo "set AWS_DEFAULT_PROFILE as $Red$AWS_DEFAULT_PROFILE$Rst"
}

# Docker EXec with Peco
function dexp() {
    container=$(docker ps --format "table {{.ID}} {{.Names}}" | grep -v "CONTAINER" | fzf | awk '{printf "%s\n", $1}')
    echo "chosen: $Red$container$Rst"
    docker exec -it $container /bin/bash
}

# Docker LOGs with Peco
function dlop() {
    container=$(docker ps -a --format "table {{.ID}} {{.Names}}" | grep -v "CONTAINER" | fzf | awk '{printf "%s\n", $1}')
    echo "chosen: $Red$container$Rst"
    docker logs $container
}

function dcuf() {
    if [[ $1 ]]; then
        local dockerfile=$1
    else
        exit 1
    fi
    docker compose -f $dockerfile up --build
}

function dcrf() {
    dcd
    dcuf $1
}

function ss() {
    sleep 300
    if [[ $1 ]]; then
	say $1
    else
        exit 1
    fi
}

function gwts() {
    if [ -z "$1" ]; then
        echo "Usage: gwts <branch-name>"
        return 1
    fi
    
    # リポジトリのルートディレクトリの絶対パスを取得
    REPO_ROOT=$(git rev-parse --show-toplevel)
    
    # 新しい作業ツリーのパスを定義
    WORKTREE_PATH="${REPO_ROOT}/git-worktrees/$1"
    
    echo "新しい作業ツリーを作成: ${WORKTREE_PATH}"

    # 新しい作業ツリーを作成
    git worktree add "${WORKTREE_PATH}" -b $1
    
    # 作成した作業ツリーに移動
    cd "${WORKTREE_PATH}"
    
    # プロジェクトの .zsh_aliases をコピー(リポジトリごとに.zsh_aliasesを設定している場合)
    # if [ -f "${REPO_ROOT}/.zsh_aliases" ]; then
    #     echo "プロジェクト固有の .zsh_aliases を作業ツリーにコピーしています..."
    #     cp "${REPO_ROOT}/.zsh_aliases" "${WORKTREE_PATH}/.zsh_aliases"
    #     echo ".zsh_aliases をコピーしました"
    # else
    #     echo "プロジェクト固有の .zsh_aliases が見つかりませんでした"
    # fi

    ########################
    ########プロジェクト固有の処理(npm installなどをやる)########
    ########################


    ########################
    ########プロジェクト固有の処理########
    ########################

    # VS Code を開く
    # echo "VS Codeを開いています..."
    # code "${WORKTREE_PATH}"
    #
    # # 元のディレクトリに戻る
    # cd -
    #
    # echo "作業ツリー '$1' のセットアップが完了しました"
}

function gwts-cd-fzf () {
  local selected_dir=$(git worktree list | awk '{ print $1}' | fzf)
  if [ -n "$selected_dir" ]; then
    BUFFER="cd ${selected_dir}"
    zle accept-line
  fi
}
zle -N gwts-cd-fzf
bindkey '^w' gwts-cd-fzf
